; ModuleID = 't1.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@s = global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @sum(i32* %v, i32 %n) #0 !dbg !4 {
entry:
  %v.addr = alloca i32*, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %v, i32** %v.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %v.addr, metadata !17, metadata !18), !dbg !19
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !20, metadata !18), !dbg !21
  call void @llvm.dbg.declare(metadata i32* %i, metadata !22, metadata !18), !dbg !24
  store i32 0, i32* %i, align 4, !dbg !24
  br label %for.cond, !dbg !25

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !26
  %1 = load i32, i32* %n.addr, align 4, !dbg !29
  %cmp = icmp slt i32 %0, %1, !dbg !30
  br i1 %cmp, label %for.body, label %for.end, !dbg !31

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !32
  %idxprom = sext i32 %2 to i64, !dbg !33
  %3 = load i32*, i32** %v.addr, align 8, !dbg !33
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom, !dbg !33
  %4 = load i32, i32* %arrayidx, align 4, !dbg !33
  %5 = load i32, i32* @s, align 4, !dbg !34
  %add = add nsw i32 %5, %4, !dbg !34
  store i32 %add, i32* @s, align 4, !dbg !34
  br label %for.inc, !dbg !35

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !36
  %inc = add nsw i32 %6, 1, !dbg !36
  store i32 %inc, i32* %i, align 4, !dbg !36
  br label %for.cond, !dbg !38

for.end:                                          ; preds = %for.cond
  %7 = load i32, i32* @s, align 4, !dbg !39
  ret i32 %7, !dbg !40
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define i32 @main() #0 !dbg !9 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %saved_stack = alloca i8*, align 8
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @llvm.dbg.declare(metadata i32* %n, metadata !41, metadata !18), !dbg !42
  store i32 1, i32* %n, align 4, !dbg !42
  %0 = load i32, i32* %n, align 4, !dbg !43
  %1 = zext i32 %0 to i64, !dbg !44
  %2 = call i8* @llvm.stacksave(), !dbg !44
  store i8* %2, i8** %saved_stack, align 8, !dbg !44
  %vla = alloca i32, i64 %1, align 16, !dbg !44
  call void @llvm.dbg.declare(metadata i32* %vla, metadata !45, metadata !49), !dbg !50
  call void @llvm.dbg.declare(metadata i32* %i, metadata !51, metadata !18), !dbg !53
  store i32 0, i32* %i, align 4, !dbg !53
  br label %for.cond, !dbg !54

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !dbg !55
  %4 = load i32, i32* %n, align 4, !dbg !58
  %cmp = icmp slt i32 %3, %4, !dbg !59
  br i1 %cmp, label %for.body, label %for.end, !dbg !60

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4, !dbg !61
  %6 = load i32, i32* %i, align 4, !dbg !62
  %idxprom = sext i32 %6 to i64, !dbg !63
  %arrayidx = getelementptr inbounds i32, i32* %vla, i64 %idxprom, !dbg !63
  store i32 %5, i32* %arrayidx, align 4, !dbg !64
  br label %for.inc, !dbg !63

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !65
  %inc = add nsw i32 %7, 1, !dbg !65
  store i32 %inc, i32* %i, align 4, !dbg !65
  br label %for.cond, !dbg !67

for.end:                                          ; preds = %for.cond
  %8 = load i32, i32* %n, align 4, !dbg !68
  %call = call i32 @sum(i32* %vla, i32 %8), !dbg !69
  %9 = load i32, i32* @s, align 4, !dbg !70
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %9), !dbg !71
  store i32 0, i32* %retval, align 4, !dbg !72
  %10 = load i8*, i8** %saved_stack, align 8, !dbg !73
  call void @llvm.stackrestore(i8* %10), !dbg !73
  %11 = load i32, i32* %retval, align 4, !dbg !73
  ret i32 %11, !dbg !73
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

declare i32 @printf(i8*, ...) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #2

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!14, !15}
!llvm.ident = !{!16}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.8.0 (tags/RELEASE_380/final 322489)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3, globals: !12)
!1 = !DIFile(filename: "t1.c", directory: "/home/guilhermel/Programs/basilisk/test")
!2 = !{}
!3 = !{!4, !9}
!4 = distinct !DISubprogram(name: "sum", scope: !1, file: !1, line: 5, type: !5, isLocal: false, isDefinition: true, scopeLine: 5, flags: DIFlagPrototyped, isOptimized: false, variables: !2)
!5 = !DISubroutineType(types: !6)
!6 = !{!7, !8, !7}
!7 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64, align: 64)
!9 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 14, type: !10, isLocal: false, isDefinition: true, scopeLine: 14, isOptimized: false, variables: !2)
!10 = !DISubroutineType(types: !11)
!11 = !{!7}
!12 = !{!13}
!13 = !DIGlobalVariable(name: "s", scope: !0, file: !1, line: 3, type: !7, isLocal: false, isDefinition: true, variable: i32* @s)
!14 = !{i32 2, !"Dwarf Version", i32 4}
!15 = !{i32 2, !"Debug Info Version", i32 3}
!16 = !{!"clang version 3.8.0 (tags/RELEASE_380/final 322489)"}
!17 = !DILocalVariable(name: "v", arg: 1, scope: !4, file: !1, line: 5, type: !8)
!18 = !DIExpression()
!19 = !DILocation(line: 5, column: 14, scope: !4)
!20 = !DILocalVariable(name: "n", arg: 2, scope: !4, file: !1, line: 5, type: !7)
!21 = !DILocation(line: 5, column: 21, scope: !4)
!22 = !DILocalVariable(name: "i", scope: !23, file: !1, line: 8, type: !7)
!23 = distinct !DILexicalBlock(scope: !4, file: !1, line: 8, column: 3)
!24 = !DILocation(line: 8, column: 12, scope: !23)
!25 = !DILocation(line: 8, column: 8, scope: !23)
!26 = !DILocation(line: 8, column: 17, scope: !27)
!27 = !DILexicalBlockFile(scope: !28, file: !1, discriminator: 1)
!28 = distinct !DILexicalBlock(scope: !23, file: !1, line: 8, column: 3)
!29 = !DILocation(line: 8, column: 19, scope: !27)
!30 = !DILocation(line: 8, column: 18, scope: !27)
!31 = !DILocation(line: 8, column: 3, scope: !27)
!32 = !DILocation(line: 9, column: 12, scope: !28)
!33 = !DILocation(line: 9, column: 10, scope: !28)
!34 = !DILocation(line: 9, column: 7, scope: !28)
!35 = !DILocation(line: 9, column: 5, scope: !28)
!36 = !DILocation(line: 8, column: 23, scope: !37)
!37 = !DILexicalBlockFile(scope: !28, file: !1, discriminator: 2)
!38 = !DILocation(line: 8, column: 3, scope: !37)
!39 = !DILocation(line: 11, column: 10, scope: !4)
!40 = !DILocation(line: 11, column: 3, scope: !4)
!41 = !DILocalVariable(name: "n", scope: !9, file: !1, line: 16, type: !7)
!42 = !DILocation(line: 16, column: 7, scope: !9)
!43 = !DILocation(line: 17, column: 9, scope: !9)
!44 = !DILocation(line: 17, column: 3, scope: !9)
!45 = !DILocalVariable(name: "v", scope: !9, file: !1, line: 17, type: !46)
!46 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, align: 32, elements: !47)
!47 = !{!48}
!48 = !DISubrange(count: -1)
!49 = !DIExpression(DW_OP_deref)
!50 = !DILocation(line: 17, column: 7, scope: !9)
!51 = !DILocalVariable(name: "i", scope: !52, file: !1, line: 19, type: !7)
!52 = distinct !DILexicalBlock(scope: !9, file: !1, line: 19, column: 3)
!53 = !DILocation(line: 19, column: 12, scope: !52)
!54 = !DILocation(line: 19, column: 8, scope: !52)
!55 = !DILocation(line: 19, column: 17, scope: !56)
!56 = !DILexicalBlockFile(scope: !57, file: !1, discriminator: 1)
!57 = distinct !DILexicalBlock(scope: !52, file: !1, line: 19, column: 3)
!58 = !DILocation(line: 19, column: 19, scope: !56)
!59 = !DILocation(line: 19, column: 18, scope: !56)
!60 = !DILocation(line: 19, column: 3, scope: !56)
!61 = !DILocation(line: 20, column: 12, scope: !57)
!62 = !DILocation(line: 20, column: 7, scope: !57)
!63 = !DILocation(line: 20, column: 5, scope: !57)
!64 = !DILocation(line: 20, column: 10, scope: !57)
!65 = !DILocation(line: 19, column: 23, scope: !66)
!66 = !DILexicalBlockFile(scope: !57, file: !1, discriminator: 2)
!67 = !DILocation(line: 19, column: 3, scope: !66)
!68 = !DILocation(line: 22, column: 10, scope: !9)
!69 = !DILocation(line: 22, column: 3, scope: !9)
!70 = !DILocation(line: 24, column: 18, scope: !9)
!71 = !DILocation(line: 24, column: 3, scope: !9)
!72 = !DILocation(line: 26, column: 3, scope: !9)
!73 = !DILocation(line: 27, column: 1, scope: !9)
