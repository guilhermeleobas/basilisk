; ModuleID = '/Users/guilhermeleobas/Programs/basilisk/Collect/collect.c'
source_filename = "/Users/guilhermeleobas/Programs/basilisk/Collect/collect.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.14.0"

%struct.Instruction = type { [10 x i8], i64 }
%struct.__sFILE = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, i8*, i32 (i8*)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i32 (i8*, i8*, i32)*, %struct.__sbuf, %struct.__sFILEX*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i64 }
%struct.__sFILEX = type opaque
%struct.__sbuf = type { i8*, i32 }

@store_inc = global i64 0, align 8
@load_inc = global i64 0, align 8
@and_inc = global i64 0, align 8
@or_inc = global i64 0, align 8
@xor_inc = global i64 0, align 8
@ashr_inc = global i64 0, align 8
@shl_inc = global i64 0, align 8
@lshr_inc = global i64 0, align 8
@add_inc = global i64 0, align 8
@sub_inc = global i64 0, align 8
@mul_inc = global i64 0, align 8
@udiv_inc = global i64 0, align 8
@sdiv_inc = global i64 0, align 8
@urem_inc = global i64 0, align 8
@srem_inc = global i64 0, align 8
@icmp_inc = global i64 0, align 8
@fadd_inc = global i64 0, align 8
@fcmp_inc = global i64 0, align 8
@fdiv_inc = global i64 0, align 8
@fmul_inc = global i64 0, align 8
@fsub_inc = global i64 0, align 8
@br_inc = global i64 0, align 8
@call_inc = global i64 0, align 8
@select_inc = global i64 0, align 8
@size = internal global i32 0, align 4
@array = internal global [10000 x %struct.Instruction] zeroinitializer, align 16
@.str = private unnamed_addr constant [10 x i8] c"count.csv\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.2 = private unnamed_addr constant [113 x i8] c"STORE,LOAD,CMP,ADD,SUB,MUL,UDIV,SDIV,UREM,SREM,FADD,FSUB,FMUL,FDIV,FCMP,AND,OR,XOR,BR,CALL,SELECT,SHL,ASHR,LSHR\0A\00", align 1
@.str.3 = private unnamed_addr constant [121 x i8] c"%llu,%llu,%llu,%llu,%llu,%llu,%llu,%llu,%llu,%llu,%llu,%llu,%llu,%llu,%llu,%llu,%llu,%llu,%llu,%llu,%llu,%llu,%llu,%llu\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"Cannot create file\0A\00", align 1

; Function Attrs: noinline nounwind ssp uwtable
define void @count_instruction(i8* %name) #0 {
entry:
  %name.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  store i8* %name, i8** %name.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @size, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [10000 x %struct.Instruction], [10000 x %struct.Instruction]* @array, i64 0, i64 %idxprom
  %name1 = getelementptr inbounds %struct.Instruction, %struct.Instruction* %arrayidx, i32 0, i32 0
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %name1, i32 0, i32 0
  %3 = load i8*, i8** %name.addr, align 8
  %call = call i32 @strcmp(i8* %arraydecay, i8* %3)
  %cmp2 = icmp eq i32 %call, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %idxprom3 = sext i32 %4 to i64
  %arrayidx4 = getelementptr inbounds [10000 x %struct.Instruction], [10000 x %struct.Instruction]* @array, i64 0, i64 %idxprom3
  %counter = getelementptr inbounds %struct.Instruction, %struct.Instruction* %arrayidx4, i32 0, i32 1
  %5 = load i64, i64* %counter, align 8
  %inc = add i64 %5, 1
  store i64 %inc, i64* %counter, align 8
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %6, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i32, i32* @size, align 4
  %idxprom6 = sext i32 %7 to i64
  %arrayidx7 = getelementptr inbounds [10000 x %struct.Instruction], [10000 x %struct.Instruction]* @array, i64 0, i64 %idxprom6
  %name8 = getelementptr inbounds %struct.Instruction, %struct.Instruction* %arrayidx7, i32 0, i32 0
  %arraydecay9 = getelementptr inbounds [10 x i8], [10 x i8]* %name8, i32 0, i32 0
  %8 = load i8*, i8** %name.addr, align 8
  %call10 = call i8* @__strcpy_chk(i8* %arraydecay9, i8* %8, i64 10) #3
  %9 = load i32, i32* @size, align 4
  %idxprom11 = sext i32 %9 to i64
  %arrayidx12 = getelementptr inbounds [10000 x %struct.Instruction], [10000 x %struct.Instruction]* @array, i64 0, i64 %idxprom11
  %counter13 = getelementptr inbounds %struct.Instruction, %struct.Instruction* %arrayidx12, i32 0, i32 1
  %10 = load i64, i64* %counter13, align 8
  %inc14 = add i64 %10, 1
  store i64 %inc14, i64* %counter13, align 8
  %11 = load i32, i32* @size, align 4
  %inc15 = add nsw i32 %11, 1
  store i32 %inc15, i32* @size, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  ret void
}

declare i32 @strcmp(i8*, i8*) #1

; Function Attrs: nounwind
declare i8* @__strcpy_chk(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind ssp uwtable
define void @dump_csv() #0 {
entry:
  %f = alloca %struct.__sFILE*, align 8
  %call = call %struct.__sFILE* @"\01_fopen"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  store %struct.__sFILE* %call, %struct.__sFILE** %f, align 8
  %0 = load %struct.__sFILE*, %struct.__sFILE** %f, align 8
  %cmp = icmp ne %struct.__sFILE* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.__sFILE*, %struct.__sFILE** %f, align 8
  %call1 = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %1, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.2, i32 0, i32 0))
  %2 = load %struct.__sFILE*, %struct.__sFILE** %f, align 8
  %3 = load i64, i64* @store_inc, align 8
  %4 = load i64, i64* @load_inc, align 8
  %5 = load i64, i64* @icmp_inc, align 8
  %6 = load i64, i64* @add_inc, align 8
  %7 = load i64, i64* @sub_inc, align 8
  %8 = load i64, i64* @mul_inc, align 8
  %9 = load i64, i64* @udiv_inc, align 8
  %10 = load i64, i64* @sdiv_inc, align 8
  %11 = load i64, i64* @urem_inc, align 8
  %12 = load i64, i64* @srem_inc, align 8
  %13 = load i64, i64* @fadd_inc, align 8
  %14 = load i64, i64* @fsub_inc, align 8
  %15 = load i64, i64* @fmul_inc, align 8
  %16 = load i64, i64* @fdiv_inc, align 8
  %17 = load i64, i64* @fcmp_inc, align 8
  %18 = load i64, i64* @and_inc, align 8
  %19 = load i64, i64* @or_inc, align 8
  %20 = load i64, i64* @xor_inc, align 8
  %21 = load i64, i64* @br_inc, align 8
  %22 = load i64, i64* @call_inc, align 8
  %23 = load i64, i64* @select_inc, align 8
  %24 = load i64, i64* @shl_inc, align 8
  %25 = load i64, i64* @ashr_inc, align 8
  %26 = load i64, i64* @lshr_inc, align 8
  %call2 = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %2, i8* getelementptr inbounds ([121 x i8], [121 x i8]* @.str.3, i32 0, i32 0), i64 %3, i64 %4, i64 %5, i64 %6, i64 %7, i64 %8, i64 %9, i64 %10, i64 %11, i64 %12, i64 %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18, i64 %19, i64 %20, i64 %21, i64 %22, i64 %23, i64 %24, i64 %25, i64 %26)
  br label %if.end

if.else:                                          ; preds = %entry
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare %struct.__sFILE* @"\01_fopen"(i8*, i8*) #1

declare i32 @fprintf(%struct.__sFILE*, i8*, ...) #1

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 6.0.1 (tags/RELEASE_601/final 342957)"}
