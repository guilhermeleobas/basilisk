; ModuleID = '/Users/guilhermeleobas/Programs/basilisk/Collect/collect.c'
source_filename = "/Users/guilhermeleobas/Programs/basilisk/Collect/collect.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.14.0"

%struct.Instruction = type { [10 x i8], i64 }
%struct.__sFILE = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, i8*, i32 (i8*)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i32 (i8*, i8*, i32)*, %struct.__sbuf, %struct.__sFILEX*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i64 }
%struct.__sFILEX = type opaque
%struct.__sbuf = type { i8*, i32 }

@size = internal global i32 0, align 4
@array = internal global [300 x %struct.Instruction] zeroinitializer, align 16
@.str = private unnamed_addr constant [10 x i8] c"count.csv\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c",%s\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"%llu\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c",%llu\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"Cannot create file\0A\00", align 1

; Function Attrs: noinline nounwind ssp uwtable
define void @count_instruction(i8* %type) #0 {
entry:
  %type.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  store i8* %type, i8** %type.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @size, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [300 x %struct.Instruction], [300 x %struct.Instruction]* @array, i64 0, i64 %idxprom
  %type1 = getelementptr inbounds %struct.Instruction, %struct.Instruction* %arrayidx, i32 0, i32 0
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %type1, i32 0, i32 0
  %3 = load i8*, i8** %type.addr, align 8
  %call = call i32 @strcmp(i8* %arraydecay, i8* %3)
  %cmp2 = icmp eq i32 %call, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %idxprom3 = sext i32 %4 to i64
  %arrayidx4 = getelementptr inbounds [300 x %struct.Instruction], [300 x %struct.Instruction]* @array, i64 0, i64 %idxprom3
  %counter = getelementptr inbounds %struct.Instruction, %struct.Instruction* %arrayidx4, i32 0, i32 1
  %5 = load i64, i64* %counter, align 8
  %inc = add i64 %5, 1
  store i64 %inc, i64* %counter, align 8
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %6, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i32, i32* @size, align 4
  %idxprom6 = sext i32 %7 to i64
  %arrayidx7 = getelementptr inbounds [300 x %struct.Instruction], [300 x %struct.Instruction]* @array, i64 0, i64 %idxprom6
  %type8 = getelementptr inbounds %struct.Instruction, %struct.Instruction* %arrayidx7, i32 0, i32 0
  %arraydecay9 = getelementptr inbounds [10 x i8], [10 x i8]* %type8, i32 0, i32 0
  %8 = load i8*, i8** %type.addr, align 8
  %call10 = call i8* @__strcpy_chk(i8* %arraydecay9, i8* %8, i64 10) #3
  %9 = load i32, i32* @size, align 4
  %idxprom11 = sext i32 %9 to i64
  %arrayidx12 = getelementptr inbounds [300 x %struct.Instruction], [300 x %struct.Instruction]* @array, i64 0, i64 %idxprom11
  %counter13 = getelementptr inbounds %struct.Instruction, %struct.Instruction* %arrayidx12, i32 0, i32 1
  %10 = load i64, i64* %counter13, align 8
  %inc14 = add i64 %10, 1
  store i64 %inc14, i64* %counter13, align 8
  %11 = load i32, i32* @size, align 4
  %inc15 = add nsw i32 %11, 1
  store i32 %inc15, i32* @size, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  ret void
}

declare i32 @strcmp(i8*, i8*) #1

; Function Attrs: nounwind
declare i8* @__strcpy_chk(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind ssp uwtable
define void @dump_csv() #0 {
entry:
  %f = alloca %struct.__sFILE*, align 8
  %i = alloca i32, align 4
  %i7 = alloca i32, align 4
  %call = call %struct.__sFILE* @"\01_fopen"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  store %struct.__sFILE* %call, %struct.__sFILE** %f, align 8
  %0 = load %struct.__sFILE*, %struct.__sFILE** %f, align 8
  %cmp = icmp ne %struct.__sFILE* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @size, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then1, label %if.end

if.then1:                                         ; preds = %if.then
  %2 = load %struct.__sFILE*, %struct.__sFILE** %f, align 8
  %call2 = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([300 x %struct.Instruction], [300 x %struct.Instruction]* @array, i64 0, i64 0, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then1
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* @size, align 4
  %cmp3 = icmp slt i32 %3, %4
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.__sFILE*, %struct.__sFILE** %f, align 8
  %6 = load i32, i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds [300 x %struct.Instruction], [300 x %struct.Instruction]* @array, i64 0, i64 %idxprom
  %type = getelementptr inbounds %struct.Instruction, %struct.Instruction* %arrayidx, i32 0, i32 0
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %type, i32 0, i32 0
  %call4 = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load %struct.__sFILE*, %struct.__sFILE** %f, align 8
  %call5 = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  %9 = load %struct.__sFILE*, %struct.__sFILE** %f, align 8
  %10 = load i64, i64* getelementptr inbounds ([300 x %struct.Instruction], [300 x %struct.Instruction]* @array, i64 0, i64 0, i32 1), align 16
  %call6 = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %9, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %10)
  store i32 1, i32* %i7, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc14, %for.end
  %11 = load i32, i32* %i7, align 4
  %12 = load i32, i32* @size, align 4
  %cmp9 = icmp slt i32 %11, %12
  br i1 %cmp9, label %for.body10, label %for.end16

for.body10:                                       ; preds = %for.cond8
  %13 = load %struct.__sFILE*, %struct.__sFILE** %f, align 8
  %14 = load i32, i32* %i7, align 4
  %idxprom11 = sext i32 %14 to i64
  %arrayidx12 = getelementptr inbounds [300 x %struct.Instruction], [300 x %struct.Instruction]* @array, i64 0, i64 %idxprom11
  %counter = getelementptr inbounds %struct.Instruction, %struct.Instruction* %arrayidx12, i32 0, i32 1
  %15 = load i64, i64* %counter, align 8
  %call13 = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %13, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i64 %15)
  br label %for.inc14

for.inc14:                                        ; preds = %for.body10
  %16 = load i32, i32* %i7, align 4
  %inc15 = add nsw i32 %16, 1
  store i32 %inc15, i32* %i7, align 4
  br label %for.cond8

for.end16:                                        ; preds = %for.cond8
  %17 = load %struct.__sFILE*, %struct.__sFILE** %f, align 8
  %call17 = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %for.end16, %if.then
  %18 = load %struct.__sFILE*, %struct.__sFILE** %f, align 8
  %call18 = call i32 @fclose(%struct.__sFILE* %18)
  br label %if.end20

if.else:                                          ; preds = %entry
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end20

if.end20:                                         ; preds = %if.else, %if.end
  ret void
}

declare %struct.__sFILE* @"\01_fopen"(i8*, i8*) #1

declare i32 @fprintf(%struct.__sFILE*, i8*, ...) #1

declare i32 @fclose(%struct.__sFILE*) #1

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 6.0.1 (tags/RELEASE_601/final 342957)"}
