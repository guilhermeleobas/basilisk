; ModuleID = 't1.bc'
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.13.0"

@s = global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@0 = private unnamed_addr constant [6 x i8] c"store\00"
@1 = private unnamed_addr constant [6 x i8] c"store\00"
@2 = private unnamed_addr constant [6 x i8] c"store\00"
@3 = private unnamed_addr constant [6 x i8] c"store\00"
@4 = private unnamed_addr constant [6 x i8] c"store\00"
@5 = private unnamed_addr constant [6 x i8] c"store\00"
@6 = private unnamed_addr constant [6 x i8] c"store\00"
@7 = private unnamed_addr constant [6 x i8] c"store\00"
@8 = private unnamed_addr constant [6 x i8] c"store\00"
@9 = private unnamed_addr constant [6 x i8] c"store\00"
@10 = private unnamed_addr constant [6 x i8] c"store\00"
@11 = private unnamed_addr constant [6 x i8] c"store\00"
@12 = private unnamed_addr constant [6 x i8] c"store\00"
@13 = private unnamed_addr constant [6 x i8] c"store\00"
@14 = private unnamed_addr constant [6 x i8] c"store\00"
@15 = private unnamed_addr constant [6 x i8] c"store\00"
@16 = private unnamed_addr constant [6 x i8] c"store\00"
@17 = private unnamed_addr constant [6 x i8] c"store\00"
@18 = private unnamed_addr constant [6 x i8] c"store\00"
@19 = private unnamed_addr constant [6 x i8] c"store\00"
@20 = private unnamed_addr constant [6 x i8] c"store\00"
@21 = private unnamed_addr constant [6 x i8] c"store\00"
@22 = private unnamed_addr constant [6 x i8] c"store\00"
@23 = private unnamed_addr constant [6 x i8] c"store\00"
@24 = private unnamed_addr constant [6 x i8] c"store\00"
@25 = private unnamed_addr constant [6 x i8] c"store\00"
@26 = private unnamed_addr constant [6 x i8] c"store\00"
@27 = private unnamed_addr constant [6 x i8] c"store\00"
@28 = private unnamed_addr constant [6 x i8] c"store\00"
@29 = private unnamed_addr constant [6 x i8] c"store\00"
@30 = private unnamed_addr constant [6 x i8] c"store\00"
@31 = private unnamed_addr constant [6 x i8] c"store\00"
@32 = private unnamed_addr constant [6 x i8] c"store\00"
@33 = private unnamed_addr constant [6 x i8] c"store\00"

; Function Attrs: nounwind ssp uwtable
define i32 @sum(i32* %v, i32 %n) #0 {
entry:
  %v.addr = alloca i32*, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %target = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i32 0, i32 0))
  store i32* %v, i32** %v.addr, align 8
  %target1 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i32 0, i32 0))
  store i32 %n, i32* %n.addr, align 4
  %target2 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %target3 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i32 0, i32 0))
  %0 = load i32, i32* %i, align 4
  %target4 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i32 0, i32 0))
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %target5 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @5, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @5, i32 0, i32 0))
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %target6 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @6, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @6, i32 0, i32 0))
  %3 = load i32*, i32** %v.addr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom
  %target7 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @7, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @7, i32 0, i32 0))
  %4 = load i32, i32* %arrayidx, align 4
  %target8 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @8, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @8, i32 0, i32 0))
  %5 = load i32, i32* @s, align 4
  %target9 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @9, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @9, i32 0, i32 0))
  %add = add nsw i32 %5, %4
  %target10 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @10, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @10, i32 0, i32 0))
  store i32 %add, i32* @s, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %target11 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @11, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @11, i32 0, i32 0))
  %6 = load i32, i32* %i, align 4
  %target12 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @12, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @12, i32 0, i32 0))
  %inc = add nsw i32 %6, 1
  %target13 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @13, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @13, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %target14 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @14, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @14, i32 0, i32 0))
  %7 = load i32, i32* @s, align 4
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %saved_stack = alloca i8*, align 8
  %i = alloca i32, align 4
  %target = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @15, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @15, i32 0, i32 0))
  store i32 0, i32* %retval, align 4
  %target1 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @16, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @16, i32 0, i32 0))
  store i32 10, i32* %n, align 4
  %target2 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @17, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @17, i32 0, i32 0))
  %0 = load i32, i32* %n, align 4
  %1 = zext i32 %0 to i64
  %2 = call i8* @llvm.stacksave()
  %target3 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @18, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @18, i32 0, i32 0))
  store i8* %2, i8** %saved_stack, align 8
  %vla = alloca i32, i64 %1, align 16
  %target4 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @19, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @19, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %target5 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @20, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @20, i32 0, i32 0))
  %3 = load i32, i32* %i, align 4
  %target6 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @21, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @21, i32 0, i32 0))
  %4 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %target7 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @22, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @22, i32 0, i32 0))
  %5 = load i32, i32* %i, align 4
  %target8 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @23, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @23, i32 0, i32 0))
  %6 = load i32, i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds i32, i32* %vla, i64 %idxprom
  %target9 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @24, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @24, i32 0, i32 0))
  store i32 %5, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %target10 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @25, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @25, i32 0, i32 0))
  %7 = load i32, i32* %i, align 4
  %target11 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @26, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @26, i32 0, i32 0))
  %inc = add nsw i32 %7, 1
  %target12 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @27, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @27, i32 0, i32 0))
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %target13 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @28, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @28, i32 0, i32 0))
  %8 = load i32, i32* %n, align 4
  %call = call i32 @sum(i32* %vla, i32 %8)
  %target14 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @29, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @29, i32 0, i32 0))
  %9 = load i32, i32* @s, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %9)
  %target15 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @30, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @30, i32 0, i32 0))
  store i32 0, i32* %retval, align 4
  %target16 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @31, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @31, i32 0, i32 0))
  %10 = load i8*, i8** %saved_stack, align 8
  call void @llvm.stackrestore(i8* %10)
  %target17 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @32, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @32, i32 0, i32 0))
  %11 = load i32, i32* %retval, align 4
  %target18 = load i8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @33, i32 0, i32 0)
  call void @count_instruction(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @33, i32 0, i32 0))
  ret i32 %11
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare i32 @printf(i8*, ...) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

declare void @count_instruction(i8*)

attributes #0 = { nounwind ssp uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"clang version 3.8.0 (tags/RELEASE_380/final 322229) (llvm/tags/RELEASE_380/final 322228)"}
