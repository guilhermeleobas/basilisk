; ModuleID = 't1.bc'
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.13.0"

@s = global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define i32 @sum(i32* %v, i32 %n) #0 {
entry:
  %v.addr = alloca i32*, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %0 = alloca [10 x i8]
  store [10 x i8] c"storeabcd\00", [10 x i8]* %0
  call void @increment_store_count()
  store i32* %v, i32** %v.addr, align 8
  %1 = alloca [10 x i8]
  store [10 x i8] c"storeabcd\00", [10 x i8]* %1
  call void @increment_store_count()
  store i32 %n, i32* %n.addr, align 4
  %2 = alloca [10 x i8]
  store [10 x i8] c"storeabcd\00", [10 x i8]* %2
  call void @increment_store_count()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  call void @increment_load_count()
  %3 = load i32, i32* %i, align 4
  call void @increment_load_count()
  %4 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  call void @increment_load_count()
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  call void @increment_load_count()
  %6 = load i32*, i32** %v.addr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom
  call void @increment_load_count()
  %7 = load i32, i32* %arrayidx, align 4
  call void @increment_load_count()
  %8 = load i32, i32* @s, align 4
  call void @increment_add_count()
  %add = add nsw i32 %8, %7
  %9 = alloca [10 x i8]
  store [10 x i8] c"storeabcd\00", [10 x i8]* %9
  call void @increment_store_count()
  store i32 %add, i32* @s, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  call void @increment_load_count()
  %10 = load i32, i32* %i, align 4
  call void @increment_add_count()
  %inc = add nsw i32 %10, 1
  %11 = alloca [10 x i8]
  store [10 x i8] c"storeabcd\00", [10 x i8]* %11
  call void @increment_store_count()
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @increment_load_count()
  %12 = load i32, i32* @s, align 4
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %saved_stack = alloca i8*, align 8
  %i = alloca i32, align 4
  %0 = alloca [10 x i8]
  store [10 x i8] c"storeabcd\00", [10 x i8]* %0
  call void @increment_store_count()
  store i32 0, i32* %retval, align 4
  %1 = alloca [10 x i8]
  store [10 x i8] c"storeabcd\00", [10 x i8]* %1
  call void @increment_store_count()
  store i32 10, i32* %n, align 4
  call void @increment_load_count()
  %2 = load i32, i32* %n, align 4
  %3 = zext i32 %2 to i64
  %4 = call i8* @llvm.stacksave()
  %5 = alloca [10 x i8]
  store [10 x i8] c"storeabcd\00", [10 x i8]* %5
  call void @increment_store_count()
  store i8* %4, i8** %saved_stack, align 8
  %vla = alloca i32, i64 %3, align 16
  %6 = alloca [10 x i8]
  store [10 x i8] c"storeabcd\00", [10 x i8]* %6
  call void @increment_store_count()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  call void @increment_load_count()
  %7 = load i32, i32* %i, align 4
  call void @increment_load_count()
  %8 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %7, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  call void @increment_load_count()
  %9 = load i32, i32* %i, align 4
  call void @increment_load_count()
  %10 = load i32, i32* %i, align 4
  %idxprom = sext i32 %10 to i64
  %arrayidx = getelementptr inbounds i32, i32* %vla, i64 %idxprom
  %11 = alloca [10 x i8]
  store [10 x i8] c"storeabcd\00", [10 x i8]* %11
  call void @increment_store_count()
  store i32 %9, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  call void @increment_load_count()
  %12 = load i32, i32* %i, align 4
  call void @increment_add_count()
  %inc = add nsw i32 %12, 1
  %13 = alloca [10 x i8]
  store [10 x i8] c"storeabcd\00", [10 x i8]* %13
  call void @increment_store_count()
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @increment_load_count()
  %14 = load i32, i32* %n, align 4
  %call = call i32 @sum(i32* %vla, i32 %14)
  call void @increment_load_count()
  %15 = load i32, i32* @s, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %15)
  %16 = alloca [10 x i8]
  store [10 x i8] c"storeabcd\00", [10 x i8]* %16
  call void @increment_store_count()
  store i32 0, i32* %retval, align 4
  call void @increment_load_count()
  %17 = load i8*, i8** %saved_stack, align 8
  call void @llvm.stackrestore(i8* %17)
  call void @increment_load_count()
  %18 = load i32, i32* %retval, align 4
  call void @dump()
  ret i32 %18
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare i32 @printf(i8*, ...) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

declare void @increment_store_count()

declare void @increment_load_count()

declare void @increment_add_count()

declare void @dump()

attributes #0 = { nounwind ssp uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"clang version 3.8.0 (tags/RELEASE_380/final 322229) (llvm/tags/RELEASE_380/final 322228)"}
